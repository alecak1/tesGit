<!--

Copyright (c) 2013, salesforce.com, Inc. All rights reserved.

Redistribution and use in source and binary forms, with or without modification,
are permitted provided that the following conditions are met:

    * Redistributions of source code must retain the above copyright notice,
    this list of conditions and the following disclaimer.
    * Redistributions in binary form must reproduce the above copyright notice,
    this list of conditions and the following disclaimer in the documentation
    and/or other materials provided with the distribution.
    * Neither the name of the salesforce.com, Inc. nor the names of its contributors
    may be used to endorse or promote products derived from this software
    without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
OF THE POSSIBILITY OF SUCH DAMAGE.

-->

<apex:component >

<!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->

    <!-- External JS and stylesheets -->
    <apex:includeScript value="{!URLFOR($Resource.MyChartsZip, '/js/jquery.js')}" />
    <apex:includeScript value="{!URLFOR($Resource.MyChartsZip, '/js/jquery.easing.js')}" />
    <apex:includeScript value="{!URLFOR($Resource.MyChartsZip, '/js/underscore.js')}" />
    <apex:includeScript value="{!URLFOR($Resource.MyChartsZip, '/js/backbone.js')}" />
    <apex:includeScript value="{!URLFOR($Resource.MyChartsZip, '/js/forcetkdetails.js')}" />
    <apex:includeScript value="{!URLFOR($Resource.MyChartsZip,
                               '/bootstrap/js/bootstrap.js')}"/>
    <script type="text/javascript" src="https://www.google.com/jsapi"></script>
    <apex:includeScript value="{!URLFOR($Resource.MyChartsZip, '/js/common.js')}" />
    <script>
        google.load("visualization", "1.0", { packages:[ "corechart", "treemap" ] });
    </script>

    <apex:includeScript value="{!URLFOR($Resource.MyChartsZip, '/js/rgbcolor.js')}"/>
    <apex:includeScript value="{!URLFOR($Resource.MyChartsZip, '/js/stackBlur.js')}"/>
    <apex:includeScript value="{!URLFOR($Resource.MyChartsZip, '/js/canvg.js')}"/>

    <apex:stylesheet value="{!URLFOR($Resource.MyChartsZip, '/css/common.css')}"/>
    <apex:stylesheet value="{!URLFOR($Resource.MyChartsZip, '/bootstrap/css/bootstrap.min.css')}"/>

<!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->

    <!-- Sub-components. Include them all here rather than throughout the project.
         Seems easier -->
    <c:ChartTypePickerView ></c:ChartTypePickerView>
    <c:EditControlsView ></c:EditControlsView>
    <c:ActionsView ></c:ActionsView>
    <c:ChartView ></c:ChartView>
    <c:BarChartView ></c:BarChartView>
    <c:PieChartView ></c:PieChartView>
    <c:ScatterChartView ></c:ScatterChartView>
    <c:TreemapChartView ></c:TreemapChartView>
    <c:ChartConfigView ></c:ChartConfigView>
    <c:ReportData ></c:ReportData>
    <c:ReportDataFormatter ></c:ReportDataFormatter>
    <c:ReportPickerView ></c:ReportPickerView>
    <c:ChatterPost ></c:ChatterPost>
    <c:Controller ></c:Controller>
    <c:Chart ></c:Chart>

<!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->

<script type="x-template" id="ChartPageViewTemplate">
    <div class="desktopPublishError">
        <div class="header">
            <div class="titleWrapper">
                <img class="myChartsIcon"
                     src="{!URLFOR($Resource.MyChartsZip,'/images/myChartsIcon@2x.png')}" />
                <span class="title">My Charts</span>
            </div>
        </div>
        <p>Creating charts from your desktop feed is not yet supported.</p>
    </div>
    <div class="reportPickerContainer"></div>
    <div class="headerContainer">
        <div class="waiting">
            <img class="waitIcon" src="{!URLFOR($Resource.MyChartsZip,
                                          '/images/loading-white.gif')}" />
            <div class="waitFailedMessage">
            Action failed. Please try again.
            </div>
        </div>
        <div class="controls"></div>
        <h1 class="chartTitle"><%- title %></h1>
        <div class="actionsContainer"></div>
    </div>
    <div class="chartContainer">
        <img class="loadingIcon" src="{!URLFOR($Resource.MyChartsZip,
                                      '/images/loading-white.gif')}" />
        <div class="errorMessage">
            <div>Not found. This chart or its report could have been deleted,
                 or you may not have permission to view it.</div>
            <div><a href="<%- prefix %>MyCharts">Your Chart Dashboard</a></div>
        </div>
    </div>
    <div class="configContainer clearfix"></div>
</script>

<!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->

<style>
    .chartPageView {
        font-weight: 300;
        background-color: white;
        margin: 20px 20px;
    }

    .mobile.chartPageView {
        margin: 0px;
    }

    .mobile .chartView {
        padding: 14px;
    }

    .viaMDP .chartContainer .chartView {
        padding: 0px;
    }

    .chartPageView .errorMessage {
        display: none;
    }

    .chartPageView .waiting {
        display:none;
        text-align: center;
    }

    .chartPageView .waitFailedMessage {
        display: none;
        font-size: 20px;
        margin-top: 30px;
    }

    .chartPageView .errorMessage div {
        margin-top: 10px;
    }

    .chartPageView .desktopPublishError {
        display:none;
    }

    .chartPageView .desktopPublishError .myChartsIcon {
        width: 32pt;
        height: 32pt;
    }

    .chartPageView .desktopPublishError .header {
        height: 40px;
        padding: 18px;
        border-radius: 5px;
        margin-bottom: 10px;
        background: -webkit-linear-gradient(bottom, #33495f 0%, #23394d 100%);
        background: -moz-linear-gradient(bottom, #33495f 0%, #23394d 100%);
        background: -ms-linear-gradient(bottom, #33495f 0%, #23394d 100%);
        background: linear-gradient(bottom, #33495f 0%, #23394d 100%);
        filter: progid:DXImageTransform.Microsoft.gradient(GradientType=0,startColorstr='#33495f', endColorstr='#23394d');/*For IE7-8-9*/
    }

    .chartPageView .desktopPublishError .title {
        margin: 15px 0 0 0px;
        padding-left: 14px;
        font-size: 20pt;
        font-weight: normal;
        vertical-align: middle;
        color: #fff;
    }

    .chartPageView .chartContainer {
        text-align: center;
        padding: 15px 20px 40px 20px;
        min-height: 300px;
        overflow: hidden;
    }

    .mobile.chartPageView .waitIcon {
        height: 50px;
    }

    .mobile.chartPageView .chartContainer {
        padding: 0px;
        min-height: 200px;
        overflow: hidden;
    }

    .chartPageView .headerContainer {
        padding: 14px;
        height:80px;
    }

    .mobile.chartPageView .headerContainer {
        height:auto;
    }

    .chartPageView .loadingIcon {
        display:none;
        position: relative;
        top: 100px;
        margin: 0 auto;
    }

    .viaMDP .saveOrCancelContainer .btn {
        display:none !important;
    }

    .viaMDP .pickerContainer {
        margin-top: 0;
    }

    .viaMDP .chartTypes {
        margin-top: 0;
    }

    .chartPageView.viaMDP {
        /* MDP puts the iframe inside a container with extra padding
           so parts of our view gets chopped off - this is a fix to
           shrink everything down slightly, when viewing via MDP
        */
        zoom:0.8;
    }

    .mobile.chartPageView .miniChartView {
        border: 1px solid #ddd;
        border-radius: 5px;
        box-shadow: 0px 2px 10px rgba(0,0,0,0.1);
        padding: 28px 0;
        background-color: white;
        margin-bottom: 14px;
    }

    .embedModal .embedInput {
        width: 100%;
        height: 120px;
        box-sizing: border-box;
    }

    .chartTitle {
        width: 400px;
        text-align: center;
        font-size: 32px;
        color: #666;
        font-weight: normal;
        line-height: 40px;
        text-overflow: ellipsis;
        white-space: nowrap;
        overflow: hidden;
        position: absolute;
        top: 3px;
        left: 50%;
        margin-left: -186px;
    }

    .mobile .chartTitle {
        position: static;
        width: 100%;
        text-align: center;
        font-size: 32px;
        color: #666;
        font-weight: normal;
        line-height: 40px;
        height: 80px;
        margin-bottom: 7px;
        text-overflow: ellipsis;
        white-space: nowrap;
        overflow: hidden;
        font-size: 20px;
        margin: 0;

        /* NOTE: if you change this descenders e.g. 'g'
         * will get cropped off
         */
        height: 50px;
    }
</style>

<!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->

<script>
;(function() {
    var app = window.MyCharts = window.MyCharts || {};

    app.ChartPageView = Backbone.View.extend({
        className: 'chartPageView',

        template: _.template($('#ChartPageViewTemplate').html()),

        /*****************************************************************/


        initialize: function(params) {
            this._maxRenderDimension = 280;
            this._defaultReportId = params.reportId;
            this._defaultChartType = params.chartType ||
                app.ChartTypes.barVertical;
            this._defaultChartState = params.chartState;
            this._apiParams = params.api;
            this._newChart = params.newChart && params.reportId;
            this._editChart = params.editChart && params.reportId;
            this._defaultTitle = params.title;
            this._isEmbed = params.embed;
            this._hasParent = params.hasParent;
            this._viaMDP = !params.chartId && !params.hasParent;

            this._chartModel = new app.Chart({
                id: params.chartId,
                ownerId: params.ownerId
            });

            this._clientFactory = function() {
                return params.api.client;
            };
        },

        /*****************************************************************/

        render: function() {
            this.$el.html(this.template({
                title: this._defaultTitle,
                prefix: app.Api.client.apexPrefix
            }));

            this.$el.addClass(app.isMobile() ? 'mobile' : 'desktop');
            if (this._viaMDP) {
                this.$el.addClass('viaMDP');
            }

            // We are being rendered inside the users homepage
            // as a publisher action, just disable
            if (!app.isMobile() && this._viaMDP) {
                this.$('.desktopPublishError').show();
                this.$el.removeClass('borderedChartApp');
                return this;
            }

            // Permalink path
            if (this._defaultReportId) {
                this._renderFromReport(this._defaultReportId,
                                       this._defaultChartState);
            }
            else {
                this._showReportPicker(this._wireMDPEvents);
            }
            return this;
        },

        /*****************************************************************/

        remove: function() {
            this._removed = true;
            this._removeConfig();
            this._editControlsView && this._editControlsView.remove();
            this._actionsView && this._actionsView.remove();
            this.$el.remove();
            this.stopListening();
            return this;
        },

        /*****************************************************************/

        _removeConfig: function() {
            this._chartConfigView && this._chartConfigView.remove();
            this._chartConfigView = null;
        },

        /*****************************************************************/

        _mode: function(mode) {
            switch (mode) {
            case 'waiting':
                this._removeConfig();
                this.$('.headerContainer').show();
                this.$('.chartTitle').hide();
                this.$('.actionsContainer').hide();
                this.$('.controls').hide();
                this.$('.waiting').show();
                this.$('.waitFailedMessage').hide();
                this.$('.waitIcon').show();
                break;

            case 'edit':
                this.$('.headerContainer').show();
                this.$('.chartTitle').hide();
                this.$('.actionsContainer').hide();
                this.$('.controls').show();
                this.$('.waiting').hide();
                break;

            case 'view':
                this._removeConfig();
                this.$('.headerContainer').show();
                this.$('.chartTitle').show();
                this.$('.actionsContainer').show();
                this.$('.controls').hide();
                this.$('.waiting').hide();
                break;

            case 'chart':
                this._removeConfig();
                this.$('.reportPickerContainer').hide();
                this.$('.headerContainer').show();
                this.$('.chartContainer').show();
                this.$('.waiting').hide();
                break;

            case 'picker':
                this._removeConfig();
                this.$('.headerContainer').hide();
                this.$('.chartContainer').hide();
                this.$('.reportPickerContainer').show();
                this.$('.waiting').hide();
                break;
            }
        },

        /*****************************************************************/

        _share: function() {
            app.openShareModal(this._chartModel.id);
            return false;
        },

        /*****************************************************************/

        _edit: function() {
            this._saveChartState = JSON.stringify(this._getChartState(true));
            if (this._chartView.supportsData()) {
                this._chartConfigView = this._chartView.createConfigView();
                this.$('.configContainer')
                    .append(this._chartConfigView.$el);
                this._chartConfigView.render();
            }
            this._mode('edit');
            return false;
        },

        /*****************************************************************/

        _cancel: function() {
            if (this._newChart) {
                this.trigger('cancel');
            }
            else {
                this._removeConfig();
                this._restoreState();
                this._mode('view');
            }
        },

        /*****************************************************************/

        _save: function(callback) {
            var self = this;

            // This check will work even if the chart family
            // is the same.
            var newState = JSON.stringify(self._getChartState(true));

            if (self._newChart || newState !== self._saveChartState) {
                app.startWaiting();
                self._mode('waiting');

                // get with imgData this time
                var state = self._getChartState(false);
                self._chartModel.save(state, {
                    wait: true,
                    success: function(model, resp, opts) {
                        app.stopWaiting();
                        self._chartModel.id = model.id;
                        self._mode('view');
                        callback && callback();
                        self.trigger('save', model.id);
                    },
                    error: function(model, xhr, options) {
                        app.stopWaiting();
                        self._newChart = true;
                        self._showError(function() {
                            self._edit();
                        });

                        callback && callback({});
                    }
                });
            }
            else {
                this._mode('view');
            }

            this.$('.chartTitle').text(JSON.parse(newState).title);
        },

        /*****************************************************************/

        _showError: function(callback) {
            this.$('.waitFailedMessage').show();
            this.$('.waitIcon').hide();
            setTimeout(function() {
                callback && callback();
            }, 2500);
        },

        /*****************************************************************/

        _delete: function() {
            var self = this;
            app.startWaiting();
            this._mode('waiting');
            self._chartModel.destroy({
                wait: true,
                success: function() {
                    app.stopWaiting();
                    self.trigger('delete');
                },
                error: function() {
                    self._showError(function() {
                        self._mode('view');
                    });
                    app.stopWaiting();
                }
            });
        },

        /*****************************************************************/

        _saveState: function() {
            var state = this._savedState = this._savedState || {};

            if (state.view && state.view !== this._chartView)
                state.view.remove();

            state.view = this._chartView;
            state.chartType = this._chartView.getType();
            state.chartState = this._chartView.getVisualState();
        },

        /*****************************************************************/

        _restoreState: function() {
            var state = this._savedState = this._savedState || {};

            if (this._chartView && state.view !== this._chartView)
                this._chartView.remove();

            // Restores any aggregate or grouping values
            state.view.setType(state.chartType);
            state.view.setVisualState(state.chartState);
            this._showChart(state.view);
        },

        /*****************************************************************/

        _processReportData: function(rawReportData) {
            //rawReportData = JSON.stringify(rawReportData);
            //rawReportData = $('<div/>').text(rawReportData).html();
            //rawReportData = JSON.parse(rawReportData);
            return new app.ReportData(rawReportData);
        },

        /*****************************************************************/

        _chartTypeChanged: function(chartType, callback) {
            var self = this;
            // If the new chart type is within the same family as the current
            // chart type, it accepts the same data. So don't create a whole
            // new chart and throw away the user's configuration - just update
            // the type of the current chart.
            var currentChartType = self._chartView.getType();
            var currentFamily = app.ChartFamiliesByType[currentChartType];
            var newFamily = app.ChartFamiliesByType[chartType];
            if (newFamily == currentFamily) {
                self._chartView.setType(chartType);
                callback(true);
                return;
            }

            self._createAndShowChart(chartType, null, function() {
                self._removeConfig();
                if (self._chartView.supportsData()) {
                    self._chartConfigView = self._chartView.createConfigView();
                    self.$('.configContainer').append(self._chartConfigView.$el);
                    self._chartConfigView.render();
                }
                callback(self._chartView.supportsData());
            });
        },

        /*****************************************************************/

        _wireMDPEvents: function() {
            var self = this;

            function saveThenShare(e) {
                self._save(function(error) {

                    if (!error) {
                        Sfdc.canvas.publisher.publish({
                            name: "publisher.setValidForSubmit", payload: 'false'
                        });
                        app.openShareModal(self._chartModel.id);
                    }
                });
            }

            if (self._viaMDP) {
                Sfdc.canvas.publisher.publish({
                    name: "publisher.setValidForSubmit", payload:"true"
                });

                Sfdc.canvas.publisher.subscribe({
                    name: 'publisher.post',
                    onData: saveThenShare
                });
            }
        },

        /*****************************************************************/

        _wireEvents: function() {
            var self = this;

            self._editControlsView.on('chartTypeChanged', function(ctype, callback) {
                self._chartTypeChanged(ctype, callback);
            });
            self._editControlsView.on('save', function() {
                self._save(function(error) {
                });
            });
            self._editControlsView.on('cancel', function() {
                self._cancel();
            });

            self._actionsView.on('edit', function() {
                self._edit();
            });
            self._actionsView.on('share', function() {
                self._share();
            });
            self._actionsView.on('delete', function() {
                self._delete();
            });
        },

        /*****************************************************************/

        _renderFromData: function(rawReportData, reportId, chartState) {
            var self = this;

            if (self._removed) {
                return;
            }

            var chartType = self._defaultChartType;
            if (self._chartView)
                chartType = self._chartView.getType();

            // HTML decode report data
            self._reportData = self._processReportData(rawReportData);
            self._reportData.id = reportId;
            self._createAndShowChart(chartType, chartState);

            self._saveState();

            self._editControlsView = new app.EditControlsView({
                chartType: chartType
            });
            self.$('.controls').append(self._editControlsView.$el).hide();
            self._editControlsView.render();

            self._actionsView = new app.ActionsView({ chart: self._chartModel });
            self.$('.actionsContainer').append(self._actionsView.$el).show();
            self._actionsView.render();

            // Set the name input
            var $name = self.$('input.chartNameInput');
            if (self._defaultTitle)
                $name.val(self._defaultTitle);
            else
                $name.val(rawReportData.attributes.reportName);

            self._wireEvents();

            if (self._newChart || self._editChart)
                self._edit();
        },

        /*****************************************************************/

        _renderFromReport: function(reportId, chartState) {
            var self = this;

            this._mode('chart');

            self._chartView && self._chartView.remove();
            self._editControlsView && self._editControlsView.remove();

            var $loadingIcon = this.$('.loadingIcon');
            $loadingIcon.show();

            var client = this._clientFactory();
            client.getReportInstances(
                reportId,
                function(instances) {
                    if (!instances || instances.length === 0) {
                        client.runReport(reportId, function(data) {
                            $loadingIcon.hide();
                            self._renderFromData(data, reportId,
                                                 chartState, $loadingIcon);
                        });
                    }
                    else {
                        client.getReportInstance(
                            reportId,
                            instances[0].id,
                            function(instanceData) {
                                $loadingIcon.hide();
                                self._renderFromData(instanceData, reportId,
                                                     chartState, $loadingIcon);
                            },
                            function(error) {
                                $loadingIcon.hide();
                                self.$('.errorMessage').show();
                            });
                    }
                },
                function(error) {
                    client.runReport(
                        reportId,
                        function(data) {
                            $loadingIcon.hide();
                            self._renderFromData(data, reportId,
                                                 chartState, $loadingIcon);
                        },
                        function(error) {
                            $loadingIcon.hide();
                            self.$('.errorMessage').show();
                        });
                });
        },

        /*****************************************************************/

        _getChartState: function(omitImgData) {
            var self = this;

            if (!self._chartView) {
                return '';
            }
            var state = {
                reportId: self._reportData.id,
                reportApiVersion: self._apiParams.version,
                reportApiUrl: self._apiParams.client.instanceUrl,
                chartType: self._chartView.getType(),
                chartState: JSON.stringify(self._chartView.getVisualState())
                    .replace(/"/g, '&#34;'),
                height:  '750px',
                title: self.$('input.chartNameInput').val()
            }
            if (!omitImgData)
                state.imgData = app.renderToImage(self._chartView.$el,
                                                  // max width and height
                                                  self._maxRenderDimension,
                                                  self._maxRenderDimension);
            return state;
        },

        /*****************************************************************/

        _createAndShowChart: function(chartType, chartState, callback) {
            var family = app.ChartFamiliesByType[chartType];
            var chartView;

            if (family in app.ChartViewMap) {
                var constructor = app[app.ChartViewMap[family]];
                chartView = new constructor({
                    data: this._reportData,
                    type: chartType
                });
            }
            else
                throw "Invalid chart type";

            this._showChart(chartView, chartState, callback);
        },

        /*****************************************************************/

        _showChart: function(chartView, chartState, callback) {
            var self = this;

            if (this._chartView)
                hideOldChart(showNewChart);
            else
                showNewChart();

            function hideOldChart(complete) {
                self._chartView.$el.fadeTo(150, 0, function() {
                    self._chartView && self._chartView.remove();
                    complete && complete();
                });
            }

            function showNewChart(complete) {
                self._mode("chart");
                self._chartView = chartView;
                if (chartState)
                    self._chartView.setVisualState(chartState);
                self._chartView.$el.css({ opacity: 0 });
                self.$('.chartContainer').append(self._chartView.$el);
                self._chartView.render();
                self._chartView.$el.fadeTo(150, 1.0, callback);
            }
        },

        /*****************************************************************/

        _showReportPicker: function(callback) {
            var self = this;

            this._mode("picker");
            this._reportPickerView = new app.ReportPickerView({
                clientFactory: this._clientFactory
            });
            this.$('.reportPickerContainer').append(this._reportPickerView.$el);
            this._reportPickerView.render();

            this._reportPickerView.on('reportSelected', function(reportId) {
                self._newChart = true;
                self._renderFromReport(reportId, self._defaultChartState);
                callback && callback.call(self);
                self._reportPickerView.off('reportSelected');
            });
        },

        /*****************************************************************/

        chartId: function() {
            return this._chartModel.id;
        },

        /*****************************************************************/

        title: function() {
            return this.$('input.chartNameInput').val() || 'My Chart';
        },

        /*****************************************************************/

    });
})();
</script>

<!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->

</apex:component>