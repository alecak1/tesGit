<!-- 

Copyright (c) 2013, salesforce.com, Inc. All rights reserved.

Redistribution and use in source and binary forms, with or without modification, 
are permitted provided that the following conditions are met:

    * Redistributions of source code must retain the above copyright notice, 
    this list of conditions and the following disclaimer.
    * Redistributions in binary form must reproduce the above copyright notice, 
    this list of conditions and the following disclaimer in the documentation 
    and/or other materials provided with the distribution.
    * Neither the name of the salesforce.com, Inc. nor the names of its contributors 
    may be used to endorse or promote products derived from this software 
    without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND 
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED 
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. 
IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, 
INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, 
BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, 
DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF 
LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE 
OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED 
OF THE POSSIBILITY OF SUCH DAMAGE.

-->

<apex:component >

<!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->

<script>

    var MyCharts = window.MyCharts = window.MyCharts || { };
    var ReportDataFormatter = MyCharts.ReportDataFormatter = { 

        singleGroupingFormatter: function(grouping, aggregates, result) {
            var ret = [ [ grouping.label, ReportData.prettifyAggregateLabel(aggregates[0].label) ] ];
            _.each(grouping.buckets, function(bucket, idx) {
                var val = (result[idx]) ? (result[idx].length == 1 ? result[idx][0] : result[idx]) : 0;
                ret.push([ bucket, val ]);
            });
            return google.visualization.arrayToDataTable(ret);
        },

        /*********************************************************************/

        pairwiseFormatter: function(grouping1, grouping2, aggregates, result) {
            var ret = [ [ grouping1.label ].concat(grouping2.buckets) ];
            _.each(grouping1.buckets, function(bucket1, bucket1Idx) {
                var row = [ bucket1 ];
                ret.push(row);
                _.each(grouping2.buckets, function(bucket2, bucket2Idx) {
                    var val = result[bucket1Idx][bucket2Idx];
                    val = (val) ? ((val.length == 1) ? val[0] : val) : 0;
                    row.push(val);
                });
            });
            return google.visualization.arrayToDataTable(ret);
        },

        /*********************************************************************/

        scatterFormatter: function(grouping, aggregates, result) {
            var ret = [ [ grouping.label ].concat(_.map(aggregates, function(x) {
                return ReportData.prettifyAggregateLabel(x.label);
            }))];
            ret[0].splice(3, 0, grouping.label);
            _.each(grouping.buckets, function(bucket, bucketIdx) {
                var row = [ bucket ].concat(result[bucketIdx])
                row.splice(3, 0, bucket);
                ret.push(row);
            });
            return google.visualization.arrayToDataTable(ret);
        },

        /*********************************************************************/

        pairwiseScatterFormatter: function(grouping1, grouping2, aggregates, result) {
            var ret = new google.visualization.DataTable({
                cols: [ { label: "id", type: 'string' },
                         { label: ReportData.prettifyAggregateLabel(aggregates[0].label), type: 'number' },
                         { label: ReportData.prettifyAggregateLabel(aggregates[1].label), type: 'number' },
                         { label: grouping1.label, type: 'string' } ]
                     });
            if (aggregates.length >= 3)
                ret.addColumn({ label: ReportData.prettifyAggregateLabel(aggregates[2].label), type: 'number' });

            var rowIdx = 0;
            _.each(grouping1.buckets, function(bucket1, bucket1Idx) {
                _.each(grouping2.buckets, function(bucket2, bucket2Idx) {
                    var row = [ { f: bucket1 + "-" + bucket2, v: rowIdx.toString() } ].concat(result[bucket1Idx][bucket2Idx]);
                    row.splice(3, 0, bucket1);
                    ret.addRow(row);
                    ++rowIdx;
                });
            });
            return ret;
        },

        /*********************************************************************/

        treemapFormatter: function(grouping1, grouping2, aggregates, result) {
            // Treemap's data format is a bit strange. It requires a unique id for each entry,
            // but our charts may have subgroupings with the same name (e.g. Industry: Tech -> Size: Large,
            // Industry: Finance, Size: Large). Google does not like the id of "Large" for two different
            // rows even though they have different parents in the tree. Lame. Anyway, work around this
            // by specifying the idea with a value (just use the row index) and a "formatted" id, which
            // we can make whatever we want (in this case "Large"). Additionally, when specifying data
            // in this way, the arrayToDataTable function doesn't work, so we need to build the
            // data table directly.
            var ret = new google.visualization.DataTable({
                cols: [ { label: grouping2.label, type: 'string' },
                        { label: grouping1.label, type: 'string' }]
            });
            _.each(aggregates, function(x) {
                ret.addColumn('number', ReportData.prettifyAggregateLabel(x.label));
            });

            // root node
            ret.addRow(['All', null, 0]);

            // depth 1 (google, why do you need this???)
            _.each(grouping1.buckets, function(bucket){
                var dummyRowVals = [ ];
                for (var i = 0; i < aggregates.length; ++i)
                    dummyRowVals.push(0);
                ret.addRow([ bucket, 'All' ].concat(dummyRowVals));
            });

            // depth 2
            var row = 0;
            _.each(grouping1.buckets, function(bucket1, bucket1Idx) {
                _.each(grouping2.buckets, function(bucket2, bucket2Idx) {
                    ret.addRow([ {v: row.toString(), f:bucket2}, bucket1 ].concat(result[bucket1Idx][bucket2Idx]));
                    ++row;
                });
            });
            return ret;
        }

    };

</script>

<!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->

</apex:component>